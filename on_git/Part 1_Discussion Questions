Runtime

1. When calculating the Big O notation for a particular algorithm, it’s necessary to consider the length of time it takes for the algorithm to run as the algorithm’s workload approaches infinity. You can think of the workload as the number of tasks required to complete a job. What determines the workload of figuring out whether your box of animal crackers contains an elephant?

    When determining workload, you have to think about how many total crackers are in that box. We would start thinking about the worse case scenario and plan that this is a big, big box. This may mean that you'll have to go into the box and pull one cracker out at a time, and see if that cracker is an elephant. This process can scale quickly if the box is the size of your house and the elephant cracker is the last cracker or it does not exist.

2. Order the following runtimes in descending order of efficiency (that is, fastest runtimes first, slowest last) as n approaches infinity:

    O(1) < O(log n) < O(n) < O(n log n) < O(n^2) < O(2^n)


Stacks and Queues

1. In the following cases, would a stack or queue be a more appropriate data structure?
The process of loading and unloading pallets onto a flatbed truck
    Stack. It would be hard to get the first pallet if there is a bunch of other pallets on top. FILO.

Putting bottle caps on bottles of beer as they roll down an assembly line
    Queue. First bottle put on the line arrives first, therefore gets cap first. FIFO.

Calculating the solution to this mathematical expression: 2 + (7 * 4) - (3 / 2)
    Stack. Look for balanced parens

2. Describe two more situations where a queue would be an appropriate data structure.
In real life??
    The Hackbright queue for our projects.
    A bathroom line.
    A grocery checkout line.

3. Describe two more situations where a stack would be an appropriate data structure.
    A stack of plates in your cubboard.
    A deck of cards when playing pocker (otherwise people will get mad at you b/c they think you're cheating).


Linked Lists

Given the linked list below, which are the nodes? What is the data for each node? Where is the head? Where is the tail? (Please be as specific as possible — exactly which parts of the diagram correspond to each part? Arrows? Boxes? Text?)
    Nodes: Apple node, berry node, cherry node. Node refers to both the two boxes combined between arrows.
    Head: Before the Apple node, points to the Apple node.
    Tail: No tail is indicated in this diagram.
    Data: "Apple", "Berry", "Cherry"


2. What’s the difference between doubly- and singly-linked lists?
    Singly-linked lists can only refer to the next node, not the previous node like a doubly linked list.

3. Why is it faster to append to a linked list if we keep track of the tail as an attribute?
    If you want to append something to the end of a linked list without a tail, you would have to start at the begining and 
    traverse your way through the list to find the end. If there is a tail indicated within the list, you can go directly to the
    end and append your item, 0(1).

Trees

1. Given the tree above, in what order would a Breadth First Search (BFS) algorithm visit each node until finding burritos (starting at food)? Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.
    food, Italian, Indian, Mexican, lasagna, pizza, tikka masala, saag, burritos

2. Given the tree above, in what order would a Depth First Search (DFS) algorithm visit each node until finding Chicago-style (starting at food)? Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.
    food, Mexican, enchiladas, tacos, burritos, Indian, saag, tikka masala, italian, pizza, lasagna, Sicilian, New York-style, Chicago-style

3. How is a binary search tree different from other trees?
    Applies rules to the structure to allow for quicker searching. Allows search list to be cut in half becuase higher values are located on the left. Therefore, you always compare your value to see if it's higher or lower than the current node and go "left" or "right" according to the value.